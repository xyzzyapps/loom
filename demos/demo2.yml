# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /Users/dev/proj/production/loom
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 158
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 36
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 601
    content: 'BlueSlytherin:loom dev$ '
  - delay: 1020
    content: s
  - delay: 126
    content: o
  - delay: 240
    content: u
  - delay: 62
    content: r
  - delay: 249
    content: c
  - delay: 151
    content: e
  - delay: 226
    content: ' '
  - delay: 119
    content: e
  - delay: 143
    content: 'n'
  - delay: 433
    content: v
  - delay: 855
    content: /
  - delay: 176
    content: b
  - delay: 136
    content: i
  - delay: 170
    content: 'n'
  - delay: 256
    content: /
  - delay: 128
    content: a
  - delay: 166
    content: c
  - delay: 273
    content: t
  - delay: 191
    content: i
  - delay: 136
    content: v
  - delay: 217
    content: a
  - delay: 288
    content: t
  - delay: 240
    content: e
  - delay: 328
    content: "\r\n"
  - delay: 10
    content: '(env) BlueSlytherin:loom dev$ '
  - delay: 1638
    content: python loom.py --generate-terminal-show fibonacci out1
  - delay: 1143
    content: "\r\n"
  - delay: 172
    content: " _________________________________________________________________________ \r\n/  #Optimized Fibonacci                                                   \\\r\n|                                                                         |\r\n| This one is pretty easy to implement and very, very fast to compute, in |\r\n| Python                                                                  |\r\n|                                                                         |\r\n\\ See <img src=\"https://i.stack.imgur.com/SPYOU.gif/>                     /\r\n ------------------------------------------------------------------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2039
    content: " _______________________ \r\n< from math import sqrt >\r\n ----------------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2042
    content: " _ \r\n<   >\r\n - \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2055
    content: " _____________ \r\n< def fib(n): >\r\n ------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2041
    content: " _______________________________________________________________________ \r\n/  In programming, infinite doesn't exist. You can use a recursive form \\\r\n| translating the math form directly in your language, for example in   |\r\n\\ Python it becomes:                                                    /\r\n ----------------------------------------------------------------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2042
    content: " _______________ \r\n< def basic(n): >\r\n --------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2047
    content: " _ \r\n<   >\r\n - \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2044
    content: " ____________________________ \r\n/  if n == 0: return 0       \\\r\n|                            |\r\n| elif n == 1: return 1      |\r\n|                            |\r\n\\ else: return F(n-1)+F(n-2) /\r\n ---------------------------- \r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\n"
  - delay: 2010
    content: '(env) BlueSlytherin:loom dev$ '
  - delay: 1876
    content: "logout\r\n"
